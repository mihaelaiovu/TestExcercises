pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/mihaelaiovu/TestExcercises.git'
                }
        }
        stage('Junit Build') {
            steps {
                sh "mvn compile"
            }
        }
        stage('Junit Test') {
            steps {
                sh "mvn test"
            }
        }
        stage('Test coverage report with Cobertura') {
            steps {
                sh "mvn package cobertura:cobertura -Dcobertura.report.format=xml"
            }
            post {
                always {
                    junit '**/TEST*.xml'
                }
            }
        }

        stage('API test with Newman') {
             steps {
                sh 'newman run Restful_Booker.postman_collection.json --environment Restful_Booker.postman_environment.json --reporters junit'
             }

            post {
                always {
                    junit '**/*xml'
                }
            }
        }


        stage('Robot Framework tests with Selenium') {
             steps {
                 sh 'robot -d results --variable BROWSER:headlesschrome infotiv.robot'
             }
             post {
                 always {
                     script {
                           step(
                                 [
                                   $class              : 'RobotPublisher',
                                   outputPath          : 'results',
                                   outputFileName      : '**/output.xml',
                                   reportFileName      : '**/report.html',
                                   logFileName         : '**/log.html',
                                   disableArchiveOutput: false,
                                   passThreshold       : 50,
                                   unstableThreshold   : 40,
                                   otherFiles          : "**/*.png,**/*.jpg",
                                 ]
                           )
                     }
                 }
             }
        }
    }

     post {
          always {
             junit '**/TEST*.xml'
             step([$class: 'CoberturaPublisher', autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: '**/coverage.xml', failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false])
             emailext attachLog: true, attachmentsPattern: '**/TEST*xml',
             body: 'Bod-DAy!', recipientProviders: [culprits()], subject:
             '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!'
          }
     }
 }
